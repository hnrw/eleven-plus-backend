// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  firstName        String?
  lastName         String?
  parentName       String
  dob              DateTime?
  gender           String?
  passwordHash     String
  admin            Boolean          @default(false)
  profilePicture   String?
  stripeId         String?
  stripeSubId      String?
  active           Boolean          @default(false)
  subEnds          DateTime?
  score            Float?
  date             DateTime         @default(now())
  dateSub          DateTime?
  gradedTests      GradedTest[]
  testSession      TestSession?
  gradedCategories GradedCategory[]
}

model Test {
  id           String        @id @default(uuid())
  num          Int           @unique
  date         DateTime      @default(now())
  problems     Problem[]
  gradedTests  GradedTest[]
  testSessions TestSession[]
}

model Problem {
  id         String     @id @default(uuid())
  question   String
  multi      Boolean    @default(false)
  correct    String
  options    String[]
  unit       String?
  num        Int
  img        String?
  date       DateTime   @default(now())
  test       Test       @relation(fields: [testId], references: [id])
  testId     String
  categories Category[]
}

model GradedTest {
  id             String          @id @default(uuid())
  marks          Int
  total          Int
  percent        Float
  num            Int
  firstAttempt   Boolean
  time           Int
  date           DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  test           Test            @relation(fields: [testId], references: [id])
  testId         String
  gradedProblems GradedProblem[]
}

model GradedProblem {
  id           String     @id @default(uuid())
  question     String
  correct      String
  selected     String?
  num          Int
  multi        Boolean    @default(false)
  img          String?
  options      String[]
  unit         String?
  date         DateTime   @default(now())
  gradedTest   GradedTest @relation(fields: [gradedTestId], references: [id])
  gradedTestId String
  categories   Category[]
}

model TestSession {
  id     String   @id @default(uuid())
  start  DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique
  Test   Test?    @relation(fields: [testId], references: [id])
  testId String?
}

model Category {
  name             String           @id
  gradedCategories GradedCategory[]
  problems         Problem[]
  gradedProblems   GradedProblem[]
}

model GradedCategory {
  id           String   @id @default(uuid())
  correct      Int      @default(0)
  attempts     Int      @default(0)
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String

  @@unique([userId, categoryName])
}
